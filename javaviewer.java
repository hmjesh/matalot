/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Shana_B;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;

/**
 *
 * @author יצחק שנלר
 */
public class javaviewer extends javax.swing.JFrame {

    /**
     * Creates new form javaviewer
     */
    public javaviewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        URL = new javax.swing.JTextField();
        upload = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        show = new javax.swing.JButton();
        saveCSV = new javax.swing.JButton();
        saveKML = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        minTime = new javax.swing.JTextField();
        choosefilt = new javax.swing.JComboBox<>();
        maxTime = new javax.swing.JTextField();
        altMin = new javax.swing.JTextField();
        latMin = new javax.swing.JTextField();
        lonMin = new javax.swing.JTextField();
        altMax = new javax.swing.JTextField();
        latMax = new javax.swing.JTextField();
        lonMax = new javax.swing.JTextField();
        filt = new javax.swing.JButton();
        resFilt = new javax.swing.JButton();
        wayToFilt = new javax.swing.JComboBox<>();
        name = new javax.swing.JTextField();
        massege = new javax.swing.JLabel();
        fileName = new javax.swing.JTextField();
        wayToFilt1 = new javax.swing.JComboBox<>();
        whichShow = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        URL.setText("enterURL");

        upload.setText("upload file/folder");
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        reset.setText("reset table");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        show.setText("show table");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });

        saveCSV.setText("save table as csv");
        saveCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCSVActionPerformed(evt);
            }
        });

        saveKML.setText("save table as KNL");
        saveKML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKMLActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("filters");

        minTime.setText("minimum time");

        choosefilt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "filt by place", "filt by name", "filt by time" }));
        choosefilt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosefiltActionPerformed(evt);
            }
        });

        maxTime.setText("maximum time");

        altMin.setText("alt minimum");
        altMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altMinActionPerformed(evt);
            }
        });

        latMin.setText("lat minimum");
        latMin.setToolTipText("");

        lonMin.setText("lon minimum");
        lonMin.setToolTipText("");

        altMax.setText("alt maximum");
        altMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altMaxActionPerformed(evt);
            }
        });

        latMax.setText("lat  maximum");
        latMax.setToolTipText("");

        lonMax.setText("lon  maximum");
        lonMax.setToolTipText("");
        lonMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lonMaxActionPerformed(evt);
            }
        });

        filt.setText("filter");
        filt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtActionPerformed(evt);
            }
        });

        resFilt.setText("reset filters");
        resFilt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resFiltActionPerformed(evt);
            }
        });

        wayToFilt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "and", "or" }));

        name.setText("name");
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        massege.setText("massege");

        fileName.setText("file name");

        wayToFilt1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "value", "not" }));

        whichShow.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "show all", "show filted" }));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(3450, 402));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "time", "id", "lat", "lon", "alt", "#WiFinetworks(up to 10)", "ssid1", "mac1", "Frequncy1", "Signal1", "ssid2", "mac2", "Frequncy2", "Signal2", "ssid3", "mac3", "Frequncy3", "Signal3", "ssid4", "mac4", "Frequncy4", "Signal4", "ssid5", "mac5", "Frequncy5", "Signal5", "ssid6", "mac6", "Frequncy6", "Signal6", "ssid7", "mac7", "Frequncy7", "Signal7", "ssid8", "mac8", "Frequncy8", "Signal8", "ssid9", "mac9", "Frequncy9", "Signal9", "ssid10", "mac10", "Frequncy10", "Signal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        jScrollPane3.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(massege, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(whichShow, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(reset))
                            .addGap(31, 31, 31)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(saveKML))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(show)
                                    .addGap(25, 25, 25)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(139, 139, 139))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(choosefilt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(wayToFilt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(wayToFilt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(filt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(152, 152, 152)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(altMax)
                            .addComponent(minTime)
                            .addComponent(altMin))
                        .addGap(144, 144, 144)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(URL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(latMin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(lonMin)
                                                .addComponent(name))
                                            .addComponent(lonMax, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(resFilt)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(saveCSV, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                            .addComponent(upload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addComponent(latMax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(massege, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(show)
                    .addComponent(URL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upload)
                    .addComponent(whichShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveCSV)
                    .addComponent(saveKML)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(latMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lonMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(altMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(latMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lonMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choosefilt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filt)
                    .addComponent(wayToFilt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resFilt)
                    .addComponent(wayToFilt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(463, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {                                       
        try {
            String text = URL.getText();
            File file = new File(text);
            if (!file.exists()) {
                massege.setText("wrong path");
                return;
            }
            if (file.isFile() && text.endsWith("csv")) {

                String db[][] = readResult.read(file);
                String newdb[][] = new String[db.length + database.length - 1][46];
                System.arraycopy(database, 0, newdb, 0, database.length);
                System.arraycopy(db, 1, newdb, database.length, db.length - 1);
                database = newdb;
                newdb = new String[db.length + dbfilted.length - 1][46];
                System.arraycopy(dbfilted, 0, newdb, 0, dbfilted.length);
                System.arraycopy(db, 1, newdb, dbfilted.length, db.length - 1);
                dbfilted = newdb;
                return;
            }
            if (file.isDirectory()) {
                File[] filesToRead = readFolder.read(text);
                String files = "Time,ID,Lat,Lon,Alt,#WiFinetworks(up to 10),SSID1,MAC1,Frequncy1,Signal1,SSID2,MAC2,Frequncy2,Signal2,SSID3,MAC3,Frequncy3,Signal3,SSID4,MAC4,Frequncy4,Signal4,SSID5,MAC5,Frequncy5,Signal5,SSID6,MAC6,Frequncy6,Signal6,SSID7,MAC7,Frequncy7,Signal7,SSID8,MAC8,Frequncy8,Signal8,SSID9,MAC9,Frequncy9,Signal9,SSID10,MAC10,Frequncy10,Signal10" + ((char) 10);
                String csv;
                for (File filesToRead1 : filesToRead) {
                    csv = filter.filt(readWIGLE.read(filesToRead1));
                    if (!csv.equals("wrong file")) {
                        files += csv;
                    }
                }
                writer.write(files, "c:\\garbeach\\result.csv");
                file = new File("c:\\garbeach\\result.csv");
                String db[][] = readResult.read(file);
                String newdb[][] = new String[db.length + database.length - 1][46];
                System.arraycopy(database, 0, newdb, 0, database.length);
                System.arraycopy(db, 1, newdb, database.length, db.length - 1);
                database = newdb;
                newdb = new String[db.length + dbfilted.length - 1][46];
                System.arraycopy(dbfilted, 0, newdb, 0, dbfilted.length);
                System.arraycopy(db, 1, newdb, dbfilted.length, db.length - 1);
                dbfilted = newdb;
                file.delete();
                return;
            }
            massege.setText("wrong file");
        } catch (IOException ex) {
            Logger.getLogger(javaviewer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                      

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {                                      
        database = new String[0][46];
        dbfilted = new String[0][46];
        System.out.print("sds:");
    }                                     

    private void altMinActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void altMaxActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void lonMaxActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void resFiltActionPerformed(java.awt.event.ActionEvent evt) {                                        
        dbfilted = new String[database.length][46];
        System.arraycopy(database, 0, dbfilted, 0, database.length);
    }                                       

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    private void saveCSVActionPerformed(java.awt.event.ActionEvent evt) {                                        
        String text = "";
        for (String[] dbfilted1 : dbfilted) {
            for (String item : dbfilted1) {
                try {
                    text += item + ",";
                } catch (Exception e) {
                }//if it null
            }
            text = text.substring(0, text.length() - 1);
            text += ((char) 10) + "";
        }
        writer.write(text, "c:\\whigle_wifi\\" + fileName.getText() + ".csv");
    }                                       

    private void saveKMLActionPerformed(java.awt.event.ActionEvent evt) {                                        
        try {
            writer.write(writeKML.write(dbfilted), "c:\\whigle_wifi\\" + fileName.getText() + ".kml");
        } catch (IOException ex) {
        }
    }                                       

    private void filtActionPerformed(java.awt.event.ActionEvent evt) {                                     
        try {
            String filting[][];
            int counter = 0;
            if (wayToFilt.getSelectedIndex() == 0) {
                filting = new String[dbfilted.length][46];
                System.arraycopy(dbfilted, 0, filting, 0, dbfilted.length);
            } else {
                filting = new String[database.length][46];
                System.arraycopy(database, 0, filting, 0, database.length);
            }
            String scv[][] = new String[filting.length][36];
            switch (choosefilt.getSelectedIndex()) {
                case 0: {   //filting by place
                    for (String[] filting1 : filting) {
                        if (wayToFilt1.getSelectedIndex() == 0) {
                            if (Double.parseDouble(filting1[2]) >= Integer.parseInt(latMin.getText()) && Double.parseDouble(filting1[2]) <= Integer.parseInt(latMax.getText()) && Double.parseDouble(filting1[3]) >= Integer.parseInt(lonMin.getText()) && Double.parseDouble(filting1[3]) <= Integer.parseInt(lonMax.getText()) && Double.parseDouble(filting1[4]) >= Integer.parseInt(altMin.getText()) && Double.parseDouble(filting1[4]) <= Integer.parseInt(altMax.getText())) {
                                scv[counter] = filting1;
                                counter++;
                            }
                        } else {
                            if (Double.parseDouble(filting1[2]) < Integer.parseInt(latMin.getText()) || Double.parseDouble(filting1[2]) > Integer.parseInt(latMax.getText()) || Double.parseDouble(filting1[3]) < Integer.parseInt(lonMin.getText()) || Double.parseDouble(filting1[3]) > Integer.parseInt(lonMax.getText()) || Double.parseDouble(filting1[4]) < Integer.parseInt(altMin.getText()) || Double.parseDouble(filting1[4]) > Integer.parseInt(altMax.getText())) {
                                scv[counter] = filting1;
                                counter++;
                            }
                        }
                    }
                }
                break;
                case 1: {   //filting by name
                    for (String[] filting1 : filting) {
                        if (wayToFilt1.getSelectedIndex() == 0) {
                            for (int j = 0; j < Integer.parseInt(filting1[5]); j++) {
                                if (filting1[j * 4 + 6].equals(name.getText())) {
                                    scv[counter] = filting1;
                                    counter++;
                                    break;
                                }
                            }
                        } else {
                            for (int j = 0; j < Integer.parseInt(filting1[5]); j++) {
                                if (filting1[j * 4 + 6].equals(name.getText())) {
                                    break;
                                }
                                if (j == Integer.parseInt(filting1[5]) - 1) {
                                    scv[counter] = filting1;
                                    counter++;
                                }
                            }
                        }
                    }
                }
                break;
                case 2: {   //filting by time
                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    Date dateMin = dateFormat.parse(minTime.getText());
                    Date dateMax = dateFormat.parse(maxTime.getText());
                    for (String[] filting1 : filting) {
                        Date date = dateFormat.parse(filting1[0]);
                        if (wayToFilt1.getSelectedIndex() == 0) {
                            if (dateMin.before(date) && date.before(dateMax)) {
                                scv[counter] = filting1;
                                counter++;
                            }
                        } else {
                            if (date.before(dateMin) || dateMax.before(date)) {
                                scv[counter] = filting1;
                                counter++;
                            }
                        }
                    }
                }
            }
            if (wayToFilt.getSelectedIndex() == 0) { //'and' 
                String[][] result = new String[counter][46];
                System.arraycopy(scv, 0, result, 0, counter);
                dbfilted = result;
            } else {    //'or, need to add, not to be instead
                if (counter == 0) {
                    return;
                }
                for (int i = 0; i < dbfilted.length; i++) {
                    for (int j = 0; i < counter; j++) {
                        if (Arrays.equals(dbfilted[i], scv[j])) {
                            break;
                        }
                        if (j == counter - 1) {
                            scv[counter] = dbfilted[i];
                            counter++;
                        }
                    }
                }
                String[][] result = new String[counter][46];
                System.arraycopy(scv, 0, result, 0, counter);
                dbfilted = result;
            }
        } catch (ParseException ex) {
            massege.setText("wrong input");
        }
    }                                    

    private void showActionPerformed(java.awt.event.ActionEvent evt) {                                     
        table.removeAll();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        String show1[][];
        if (whichShow.getSelectedIndex() == 0) {
            show1 = database;
        } else {
            show1 = dbfilted;
        }
        for (String[] row : show1) {
            model.addRow(row);
        }
    }                                    

    private void choosefiltActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        dbfilted = new String[0][46];
        database = new String[0][46];
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(javaviewer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(() -> {
            new javaviewer().setVisible(true);
        });
    }
    private static String[][] database;
    private static String[][] dbfilted;

    // Variables declaration - do not modify                     
    private javax.swing.JTextField URL;
    private javax.swing.JTextField altMax;
    private javax.swing.JTextField altMin;
    private javax.swing.JComboBox<String> choosefilt;
    private javax.swing.JTextField fileName;
    private javax.swing.JButton filt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField latMax;
    private javax.swing.JTextField latMin;
    private javax.swing.JTextField lonMax;
    private javax.swing.JTextField lonMin;
    private javax.swing.JLabel massege;
    private javax.swing.JTextField maxTime;
    private javax.swing.JTextField minTime;
    private javax.swing.JTextField name;
    private javax.swing.JButton resFilt;
    private javax.swing.JButton reset;
    private javax.swing.JButton saveCSV;
    private javax.swing.JButton saveKML;
    private javax.swing.JButton show;
    private javax.swing.JTable table;
    private javax.swing.JButton upload;
    private javax.swing.JComboBox<String> wayToFilt;
    private javax.swing.JComboBox<String> wayToFilt1;
    private javax.swing.JComboBox<String> whichShow;
    // End of variables declaration                   
}
